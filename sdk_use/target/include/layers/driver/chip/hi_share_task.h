
#ifndef __HI_SHARE_TASK_H__
#define __HI_SHARE_TASK_H__
#include <hi_types.h>
#include <hi_mdm_types.h>


typedef enum
{
    HI_SHARE_TASK_ID_0=0,
    HI_SHARE_TASK_ID_MAX,
}HI_SHARE_TASK_ID_E;



//任务资源配置

#define HI_SHARE_TASK_0_STACK_SIZE      0x1000
#define HI_SHARE_TASK_0_TASK_PRI        25
#define HI_SHARE_TASK_0_MSGQ_LEN        16
#define HI_SHARE_TASK_0_TASK_NAME       "share0"
#define HI_SHARE_TASK_0_MSGQ_NAME       "share0"

//任务使用分配
#define HI_SHARE_TASK_ID_REFRESH_BQ_INFO            HI_SHARE_TASK_ID_0
#define HI_SHARE_TASK_ID_REFRESH_3518_VER           HI_SHARE_TASK_ID_0
#define HI_SHARE_TASK_ID_REFRESH_ICC_CONNECT_STAT   HI_SHARE_TASK_ID_0


typedef HI_VOID (*SHARE_TASK_FUNC)(HI_SYS_QUEUE_MSG_S *pMsg);
#ifdef PRODUCT_CFG_SUPPORT_SHARE_TASK

HI_U32 HI_SHARE_TASKQ_Init(HI_VOID);
HI_U32 HI_SHARE_TASKQ_Create(HI_SHARE_TASK_ID_E ulShareTaskId,HI_U32 *pHandle,SHARE_TASK_FUNC pfn);
HI_U32 HI_SHARE_TASKQ_SendMsg(HI_SHARE_TASK_ID_E ulShareTaskId,HI_U32 ulHandle,HI_SYS_QUEUE_MSG_S *pMsg);
#else
HI_PRVL HI_U32 HI_SHARE_TASKQ_Init(HI_VOID){return HI_ERR_NOT_SUPPORT;}
HI_PRVL HI_U32 HI_SHARE_TASKQ_Create(HI_SHARE_TASK_ID_E ulShareTaskId,HI_U32 *pHandle,SHARE_TASK_FUNC pfn){return HI_ERR_NOT_SUPPORT;}
HI_PRVL HI_U32 HI_SHARE_TASKQ_SendMsg(HI_SHARE_TASK_ID_E ulShareTaskId,HI_U32 ulHandle,HI_SYS_QUEUE_MSG_S *pMsg){return HI_ERR_NOT_SUPPORT;}

#endif


#endif

