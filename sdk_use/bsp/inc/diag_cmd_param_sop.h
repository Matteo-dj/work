//*****************************************************************************
//
//                  版权所有 (C), 2001-2011, 华为技术有限公司
//
//*****************************************************************************
//  文 件 名   : diag_sys_cmd_param_sop.h
//  版 本 号   : V1.0 
//  作    者   : 沈汉坤 0013042 
//  生成日期   : 2008年07月07日
//  功能描述   : 该文件定义了DIAG命令ID及其参数和描述。
//               CAUTION:
//               This file is generated by RDE(HiStudio Tool at PC side), 
//               PLEASE DON'T change this file by hand.
//                
//  函数列表   : 无
//  修改历史   : 
//  1.日    期 : 2008年07月07日
//    作    者 : RDE 
//    修改内容 : 创建文件 
//    
//*****************************************************************************


#ifndef __DIAG_SYS_CMD_PARAM_SOP_H__
#define __DIAG_SYS_CMD_PARAM_SOP_H__

#include "diag_cmd_id.h"
#include "diag_cmd_param_plugin.h"

//*****************************************************************************
// 描述 : HSO连接UE设备，通知设备HSO已经开始连接UE 
// ID   : DIAG_CMD_HOST_CONNECT 
// REQ  : DIAG_CMD_HOST_CONNECT_REQ_STRU 
// CNF  : DIAG_CMD_HOST_CONNECT_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  

typedef struct  
{
    HI_U32 ulRc; // 结果码
    HI_CHAR szImei[16]; // [0-5]=MAC ADDRESS; [6-7] = TEI; [8] = 1(CCO)/0(STA); [9]=0(抄表模块); 1(抄控器) 
    HI_UE_SOFT_VERSION_S stUeSoftVersion;
    HI_UE_PRODUCT_VER_S stBuildVersion;
} DIAG_CMD_HOST_CONNECT_CNF_STRU;

//*****************************************************************************
// 描述 : HSO断开连接UE设备
// ID   : DIAG_CMD_HOST_DISCONNECT 
// REQ  : DIAG_CMD_HOST_DISCONNECT_REQ_STRU 
// CNF  : DIAG_CMD_HOST_DISCONNECT_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  


typedef struct  
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_HOST_DISCONNECT_CNF_STRU;


//*****************************************************************************
// 描述 : 监测UE是否死机；UE处理：接收到该命令后，直接返回
// ID   : DIAG_CMD_UE_ALIVE_SPY 
// REQ  : DIAG_CMD_UE_ALIVE_SPY_REQ_STRU 
// CNF  : DIAG_CMD_UE_ALIVE_SPY_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  



//*****************************************************************************
// 描述 : 监测UE是否死机；UE处理：接收到该命令后，直接返回
// ID   : DIAG_CMD_HOST_TEST 
// REQ  : DIAG_CMD_HOST_TEST_REQ_STRU 
// CNF  : DIAG_CMD_HOST_TEST_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  


//*****************************************************************************
// 描述 : 该数据是发送给HSO作为某个命令超时时返回
// ID   : DIAG_CMD_TIMER_OUT_IND 
// IND  : DIAG_CMD_TIMER_OUT_IND_STRU
// 说明 : 用来上报命令超时的问题
//*****************************************************************************  
typedef struct  
{
    HI_U32 ulCmdID;      // 未返回的超时命令字
    HI_U32 ulAuId;       // 未返回的超时命令字ulAuId
    HI_U32 ulReqIdx;     // 未返回的超时命令字请求索引号
    HI_U16 usSn;         // 未返回的超时命令字命令序列号
    HI_U16 usCtrl;       // 未返回的超时命令字命令控制字，用于标识命令是否传输完毕
} DIAG_CMD_TIMER_OUT_IND_STRU;


//*****************************************************************************
// 描述 : HSO连接UE设备, 通知HSO的主机信息给UE设备 
// ID   : DIAG_CMD_HOST_DEVICE_INFO 
// REQ  : DIAG_CMD_HOST_DEVICE_INFO_REQ_STRU 
// CNF  : DIAG_CMD_HOST_DEVICE_INFO_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct
{
    HI_U32 ulHostIpAddr; // Host IP
    HI_U32 ulDestIpAddr; // UE IP
    HI_U16 usUdpPort;
    HI_U16 padding;
    HI_U8 aucHostMacAddr[6];
    HI_U8 aucDestMacAddr[6]; // UE Mac
} DIAG_CMD_HOST_DEVICE_INFO_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码
    HI_U8 aucHostMacAddr[6];
} DIAG_CMD_HOST_DEVICE_INFO_CNF_STRU;

//*****************************************************************************
// DIAG指令优先级别
// DIAG_CMD_PRIOTY_LOW
//    定义DIAG指令优先级别，低级别
// DIAG_CMD_PRIOTY_NOMAL
//    定义DIAG指令优先级别，普通级别，正常默认的级别为该级别
// DIAG_CMD_PRIOTY_HIGH
//    定义DIAG指令优先级别，高级别
//
//*****************************************************************************
#define DIAG_CMD_PRIORITY_LOW	                                       (0x0)
#define DIAG_CMD_PRIORITY_NORMAL	                                   (0x1)
#define DIAG_CMD_PRIORITY_HIGH	                                       (0x2)

//*****************************************************************************
//获取序列号类约束相关宏定义
//*****************************************************************************

//DIAG_CMD_GET_LOG_CONFIG 一次所get的LOG cfg的最多模块数目
#define DIAG_CMD_GET_LOG_CONFIG_MAX_NUM                                50
//DIAG_CMD_IMEI_QRY IMEI号码字符串最大长度,暂定40,保持四字节对齐
#define DIAG_CMD_IMEI_MAX_NUM                                          40

//DIAG_CMD_SW_VER_QRY 软件版本信息字符串最大长度,暂定80,保持四字节对齐
#define DIAG_CMD_SW_VER_MAX_NUM                                        80

//DIAG_CMD_HW_VER_QRY 硬件版本信息字符串最大长度,暂定40,保持四字节对齐
#define DIAG_CMD_HW_VER_MAX_NUM                                        40

//DIAG_CMD_HW_INFO_QRY 设备名称以产品版本信息
//以及设备出厂时间暂定80,保持四字节对齐
#define DIAG_CMD_HW_INFO_MAX_NUM                                       80
//ID:DIAG_CMD_REG_RD
//寄存器最大读个数 500
#define DIAG_CMD_REG_RD_MAX_NUM                                        500

//命令ID:DIAG_CMD_MEM_RD
//内存读取长度若超过2048,UE则多次连续上报
#define DIAG_CMD_MEM_RD_MAX_NUM                                        2048

//*****************************************************************************
//是否需要接受下一包
//参见结构MSP_DIAG_HEAD_CNF_STRU 成员usCtrl       
//正常状态该值为零,表明不需要发送多包;如果为1,表明还有数据,直到该值为零
//*****************************************************************************

//正常状态该值为零,表明不需要发送多包
#define DIAG_RECV_CTRL_FINISHED_FLG                                    (0)

//为1,表明还有数据,直到该值为零
#define DIAG_RECV_CTRL_CONTINUE_FLG                                    (1)


//*****************************************************************************
//命令配置日志信息相关宏定义 
//*****************************************************************************

// 日志类型定义
#define DIAG_CMD_LOG_CATETORY_PRINT_ID                                (1<<15)
#define DIAG_CMD_LOG_CATETORY_EVENT_ID                                (1<<14)
#define DIAG_CMD_LOG_CATETORY_AIR_ID                                  (1<<13)
#define DIAG_CMD_LOG_CATETORY_LAYER_ID                                (1<<12)
#define DIAG_CMD_LOG_CATETORY_DUMP_ID                                 (1<<11)
#define DIAG_CMD_LOG_CATETORY_MSG_ID                                  (1<<10)
#define DIAG_CMD_LOG_CATETORY_USERPLANE_ID                            (1<<9)

// 普通打印级别定义
#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_NONE                             (0x80000000)
#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_ERROR                            (0x40000000)
#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_WARNING                          (0x20000000)
#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_INFO                             (0x10000000)
#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_NORMAL                           (0x08000000)

#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_1                                (0x04000000)
#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_2                                (0x02000000)
#define DIAG_CMD_LOG_CFG_PRINT_LEVEL_3                                (0x01000000)

// 事件日志级别定义
#define DIAG_CMD_LOG_CFG_EVENT_TYPE_INFO                              (0x00800000)
#define DIAG_CMD_LOG_CFG_EVENT_TYPE_AUDIT_FAILURE                     (0x00400000)
#define DIAG_CMD_LOG_CFG_EVENT_TYPE_AUDIT_SUCCESS                     (0x00200000)
#define DIAG_CMD_LOG_CFG_EVENT_TYPE_ERROR                             (0x00100000)
#define DIAG_CMD_LOG_CFG_EVENT_TYPE_WARNING                           (0x00080000)

// 层间、空口、用户面数据的开关采用如下宏定义
#define DIAG_CMD_REQ_LOG_CFG_FILTER_SWT_CLOSE                         (0x00000000)
#define DIAG_CMD_REQ_LOG_CFG_FILTER_SWT_OPEN                          (0x80000000)
 

//*******************************************************************************************
// DIAG_CMD_LOG_IND 日志输出
//*******************************************************************************************

//针对层间消息的上报
#define DIAG_CMD_REQ_IND_OS_MSG_UL                                    (0x80000000)//(1<<31)
#define DIAG_CMD_REQ_IND_OS_MSG_DL                                    (0x40000000)  

// DUMP数据输出格式定义
#define DIAG_CMD_IND_DUMP_2X_HEX_BYTE                                 (0x00000000)
#define DIAG_CMD_IND_DUMP_4X_HEX_WORD                                 (0x01000000)
#define DIAG_CMD_IND_DUMP_8X_HEX_DWORD                                (0x02000000)
#define DIAG_CMD_IND_DUMP_2D_DECIMAL_BYTE                             (0x10000000)
#define DIAG_CMD_IND_DUMP_4D_DECIMAL_WORD                             (0x20000000)
#define DIAG_CMD_IND_DUMP_8D_DECIMAL_DWORD                            (0x40000000)

//*****************************************************************************
//  所有CMD REQ 以及 CNF,IND 对应结构定义
//  
// 
// 
//*****************************************************************************  

//*****************************************************************************
//  ID: DIAG_CMD_STOP
// REQ: DIAG_CMD_STOP_REQ_STRU
// CNF: DIAG_CMD_STOP_CNF_STRU
// IND: None
//*****************************************************************************  
  
//
// REQ -->
typedef struct  
{
    HI_U32 ulCmdId;
} DIAG_CMD_STOP_REQ_STRU;

//
// CNF/IND <--
typedef struct  
{
    HI_U32 ulRc;//	
} DIAG_CMD_STOP_CNF_STRU;

typedef struct
{
    HI_U32 ulModuleId;   // 如果为0xFFFFFFFF表示为所有模块的Level开关。
} DIAG_CMD_LOG_INIT_REQ_STRU;

typedef struct
{
    HI_U32 ulRc;//	
} DIAG_CMD_LOG_INIT_ACK_STRU;


typedef struct
{
    HI_CHAR szProductVer[24]; // Hi3911 V100R001B00C01
    HI_CHAR szFileVer[8]; // 
    HI_CHAR szNvVer[4]; // 
    HI_CHAR szDate[12]; // 
    HI_CHAR szTime[12]; // 
} DIAG_CMD_VER_QRY_ACK_STRU;

//*****************************************************************************
// 090902 新增命令的CAT CFG参数结构
// BEGIN
//*****************************************************************************

#define DIAG_CMD_ALL_MODULE_ID  0xFFFFFFFF 
//*****************************************************************************
// 描述 : 针对模块的打印开关命令,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_PRINT
// REQ  : DIAG_CMD_LOG_CAT_PRINT_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_PRINT_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModuleId;   // 如果为0xFFFFFFFF表示为所有模块的Level开关。
    HI_U32 ulLevelFilter;    // ERROR|WARNING|NORMAL|INFO 1: OPEN, 0：CLOSE
} DIAG_CMD_LOG_CAT_PRINT_REQ_STRU;

typedef struct
{
    // 如果多包命令参数的情况，一个模块错误，就会返回失败
    // 但是正确的模块参数依然会存储
    HI_U32 ulRc; // 结果码
    HI_U32 ulModuleId;
} DIAG_CMD_LOG_CAT_PRINT_CNF_STRU;

#define DIAG_CMD_LAYER_MOD_SRC   (0)
#define DIAG_CMD_LAYER_MOD_DST   (1)

//*****************************************************************************
// 描述 : 针对模块的层间开关,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_LAYER
// REQ  : DIAG_CMD_LOG_CAT_LAYER_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_LAYER_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModuleId;       // 模块ID
    HI_U32 ulIsDestModule;   // 0: 表示Source Module， 1：表示Dest Module 
    HI_U32 ulSwitch;         // (0x00000000): 关；(0x80000000)：开
} DIAG_CMD_LOG_CAT_LAYER_REQ_STRU;

// 如果多包命令参数的情况，一个模块错误，就会返回失败，但是正确的模块参数依然会存储
typedef struct
{
    HI_U32 ulRc; // 结果码
    HI_U32 ulModuleId;
} DIAG_CMD_LOG_CAT_LAYER_CNF_STRU;

//*****************************************************************************
// 描述 : 针对AIR的总开关,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_AIR
// REQ  : DIAG_CMD_LOG_CAT_AIR_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_AIR_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulSwitch; // (0x00000000): 关；(0x80000000)：开
} DIAG_CMD_LOG_CAT_AIR_REQ_STRU;

typedef struct
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_LOG_CAT_AIR_CNF_STRU;


//*****************************************************************************
// 描述 : 针对L1的总开关,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_L1
// REQ  : DIAG_CMD_LOG_CAT_L1_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_L1_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulSwitch; // (0x00000000): 关；(0x80000000)：开
} DIAG_CMD_LOG_CAT_L1_REQ_STRU;

typedef struct
{
    HI_U32 ulRc; // 结果码
    HI_U32 ulSwitch;
} DIAG_CMD_LOG_CAT_L1_CNF_STRU;


//*****************************************************************************
// 描述 : 针对L1的总开关,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_EVENT
// REQ  : DIAG_CMD_LOG_CAT_EVENT_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_EVENT_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulSwitch; // (0x00000000): 关；(0x80000000)：开
} DIAG_CMD_LOG_CAT_EVENT_REQ_STRU;

typedef struct
{
    HI_U32 ulRc; // 结果码
    HI_U32 ulSwitch;
} DIAG_CMD_LOG_CAT_EVENT_CNF_STRU;


//*****************************************************************************
// 描述 : 针对UserPlane 消息ID的开关,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_USERPLANE
// REQ  : DIAG_CMD_LOG_CAT_USERPLANE_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_USERPLANE_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulMsgId;  // 消息ID
    HI_U32 ulSwitch; // (0x00000000): 关；(0x80000000)：开
} DIAG_CMD_LOG_CAT_USERPLANE_REQ_STRU;

typedef struct
{
    // 如果多包命令参数的情况，一包MSG ID错误，就会返回失败,但是正确的参数依然会存储;
    HI_U32 ulRc; // 结果码
    HI_U32 ulMsgId;  // // 消息ID
} DIAG_CMD_LOG_CAT_USERPLANE_CNF_STRU;


//*****************************************************************************
// 描述 : 针对模块的打印开关命令,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_CMD
// REQ  : DIAG_CMD_LOG_CAT_CMD_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_CMD_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_ALL_CMD         (0xFFFFFFFF)

typedef struct
{
    HI_U32 ulId;         // 如果为0xFFFFFFFF表示为控制所有命令上报的开关。
    HI_U32 ulCmdSwt;     // (0x00000000): 关；(0x80000000)：开
} DIAG_CMD_LOG_CAT_CMD_REQ_STRU;

typedef struct
{
    HI_U32 ulRc;         // 结果码
    HI_U32 ulId;
} DIAG_CMD_LOG_CAT_CMD_CNF_STRU;


//*****************************************************************************
// 描述 : 针对消息ID/命令ID的开关,支持多个命令参数
// ID   : DIAG_CMD_LOG_CAT_CFG
// REQ  : DIAG_CMD_LOG_CAT_CFG_REQ_STRU
// CNF  : DIAG_CMD_LOG_CAT_CFG_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulId;       // 消息ID/命令ID
    HI_U32 ulCategory; // 取值为 DIAG_CMD_LOG_CATETORY_XXX 
    HI_U32 ulSwitch;   // (0x00000000):关;  (0x80000000):开
} DIAG_CMD_LOG_CAT_CFG_REQ_STRU;

typedef struct
{
    // 如果多包命令参数的情况，一包MSG ID错误，就会返回失败,但是正确的参数依然会存储;
    HI_U32 ulRc;       // 结果码
    HI_U32 ulId;       // 消息ID/命令ID
} DIAG_CMD_LOG_CAT_CFG_CNF_STRU;


//*****************************************************************************
// CMD ID : 
// REQ    : 
// CNF    : 
// IND    : DIAG_CMD_LOG_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModule;     // 模块ID,如果针对消息,则是源模块ID    
    HI_U32 ulNo;         // IND标号
    HI_U32 ulCategory;   // Category 类型,见上述DIAG_CMD_LOG_IND对应宏定义
    HI_U32 ulLevel;      // 输出级别,分别针对普通日志和事件日志,见上述DIAG_CMD_LOG_IND对应宏定义
    HI_U32 ulSide;       // 网络侧? UE侧? 主要针对所有消息 由用户使用外部接口输入
    HI_U32 ulDestMod;    // 目的模块比如,RRC->NAS
    HI_U32 ulMsgId;      // 消息或者事件ID,主要针对消息,空口,事件,普通打印输出时该成员为零
    HI_S8 aucDta[0];     // 用户数据缓存区
} DIAG_CMD_LOG_IND_STRU;


//*****************************************************************************
// CMD ID : 
// REQ    : 
// CNF    : 
// IND    : DIAG_CMD_LOG_AIR_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModule;     // 源模块ID    
    HI_U32 ulSide;       // 1: NET-->UE, 2: UE-->NET
    HI_U32 ulNo;         // 序号
    HI_U32 ulId;         // ID
    HI_S8 aucDta[0];     // 用户数据缓存区
} DIAG_CMD_LOG_AIR_IND_STRU;


//*****************************************************************************
// CMD ID : 
// REQ    : 
// CNF    : 
// IND    : DIAG_CMD_LOG_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModule;     // 源模块ID    
    HI_U32 ulDestMod;    // 目的模块ID
    HI_U32 ulNo;         // 序号
    HI_U32 ulId;         // ID
    HI_S8 aucDta[0];     // 用户数据缓存区
} DIAG_CMD_LOG_LAYER_IND_STRU;


//*****************************************************************************
// CMD ID : 
// REQ    : 
// CNF    : 
// IND    : DIAG_CMD_LOG_USERPLANE_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulNo;         // 序号
    HI_U32 ulId;         // ID
    HI_S8 aucDta[0];     // 用户数据缓存区
} DIAG_CMD_LOG_USERPLANE_IND_STRU;


//*****************************************************************************
// CMD ID : 
// REQ    : 
// CNF    : 
// IND    : DIAG_CMD_LOG_EVENT_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulNo;      // 序号
    HI_U32 ulId;      // 消息或者事件ID,主要针对消息,空口,事件,普通打印输出时该成员为零
} DIAG_CMD_LOG_EVENT_IND_STRU;


//*****************************************************************************
// CMD ID : 
// REQ    : 
// CNF    : 
// IND    : DIAG_CMD_LOG_EVENT_EX_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModule;     // 源模块ID    
    HI_U32 ulLevel;      // 输出级别
    HI_U32 ulNo;         // 序号
    HI_U32 ulId;         // ID
    HI_S8 aucDta[0];     // 用户数据缓存区
} DIAG_CMD_LOG_EVENT_EX_IND_STRU;


//*****************************************************************************
// CMD ID : -
// REQ    : -
// CNF    : -
// IND    : DIAG_CMD_LOG_PRINT_TEXT_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModule; // 打印信息所在的模块ID
    HI_U32 ulLevel;  // 输出级别,分别针对普通日志和事件日志,见上述DIAG_CMD_LOG_IND对应宏定义
    HI_U32 ulFile;   // 打印字符串所在的文件名ID；
    HI_U32 ulLineNo; // 打印字符串所在的位置(文件的行号)
    HI_U32 ulNo;     // IND标号
    HI_S8 szText[0]; // 打印文本内容,以'\0'结尾。
} DIAG_CMD_LOG_PRINT_TXT_IND_STRU;

//*****************************************************************************
// CMD ID : 
// REQ    : -
// CNF    : -
// IND    : DIAG_CMD_LOG_PRINT_RAW_TXT_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModule; // 打印信息所在的模块ID
    HI_U32 ulLevel;  // 输出级别
    HI_U32 ulNo;     // IND标号
    HI_S8 szText[0]; // 所有打印文本内容，可能包括文件和行号,以'\0'结尾。
} DIAG_CMD_LOG_PRINT_RAW_TXT_IND_STRU;

//*****************************************************************************
// CMD ID : -
// REQ    : -
// CNF    : -
// IND    : DIAG_CMD_LOG_PRINT_BIN_IND 
//*****************************************************************************
typedef struct
{
    HI_U32 ulModule;    // 打印信息所在的模块ID
    HI_U32 ulLevel;     // 输出级别
    HI_U32 ulNo;        // IND标号
    HI_U32 ulId[3];     // 打点ID,保存文件名、行号、字符串常量信息
    HI_U32 ulDataSize;  // 
    HI_U32 szData[0];   // 打点二进制数据。
} DIAG_CMD_LOG_PRINT_BIN_IND_STRU;

//*****************************************************************************
// CMD ID : -对应DSP所有的REQ DIAG CMD ID
// REQ    : - 对应DSP所有的REQ
// CNF    : - 
//*****************************************************************************
typedef struct
{
    HI_U32 ulRc;       // 0: SUCCESS OTHER: FAILUE
} DIAG_CMD_DSP_CNF_STRU;


//*****************************************************************************
// CMD ID : - 对应DIAG_CMD_SET_AT_PHY_CHANNEL
// REQ    : -     DIAG_CMD_SET_AT_PHY_CHANNEL_REQ_STRU
// CNF    : -     DIAG_CMD_SET_AT_PHY_CHANNEL_CNF_STRU
//*****************************************************************************

//
// 通过该通道把数据写入NV
//
typedef enum 
{
    PHY_CHANNEL_ETH  = 0,
    PHY_CHANNEL_USB  = 1,
    PHY_CHANNEL_UART = 2,  
    PHY_CHANNEL_UNKNOWN = 0xFFF 
} MSP_AT_PHY_CHANNEL_ENUM; 

// REQ
typedef struct 
{
    MSP_AT_PHY_CHANNEL_ENUM enPhyChannel;
} DIAG_CMD_SET_AT_PHY_CHANNEL_REQ_STRU; 

// 回复
typedef struct 
{
    MSP_AT_PHY_CHANNEL_ENUM enPhyChannel;
    HI_U32 ulRc;
} DIAG_CMD_SET_AT_PHY_CHANNEL_CNF_STRU; 


#endif // __DIAG_SYS_CMD_PARAM_SOP_H__

