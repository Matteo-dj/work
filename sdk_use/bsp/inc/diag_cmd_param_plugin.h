//*****************************************************************************
//
//                  版权所有 (C), 2001-2011, 华为技术有限公司
//
//*****************************************************************************
//  文 件 名   : diag_sys_cmd_param_plugin.h
//  版 本 号   : V1.0 
//  作    者   : 沈汉坤 0013042 
//  生成日期   : 2008年07月07日
//  功能描述   : 该文件定义了命令ID及其参数和描述。
//               CAUTION:
//               This file is generated by RDE(HiStudio Tool at PC side), 
//               PLEASE DON'T change this file by hand.
//                
//  函数列表   : 无
//  修改历史   : 
//  1.日    期 : 2008年07月07日
//    作    者 : RDE 
//    修改内容 : 创建文件 
//  2.日    期 : 2009年11月15日
//    作    者 : 郭成钢/00149569
//    修改内容 : 
//              1、新增配置ph_ra_mode DIAG命令DIAG_CMD_LTE_SET_PH_RA_MODE，
//                 用于在开机注册之前设置FDD还是TDD模式，
//                 并去除DIAG_CMD_LTE_CFG_REQ_STRU中的ulRaMode字段
//              2、根据PS接口文档，修改DIAG_CMD_LTE_CFG_REQ_STRU，
//                 将APN长度由80修改为101 （最多100位APN + 字符串结尾字符'\0'）
//              3、结构DIAG_CMD_LTE_REG_STAT_IND_STRU添加ulRegStatus字段标明注册状态，
//                 其中1和5为注册状态，其他为非注册状态
//              4、命令DIAG_CMD_LTE_DETTACH名称修改为DIAG_CMD_LTE_DETACH，
//                 DIAG_CMD_LTE_DETTACH_IND修改为DIAG_CMD_LTE_DETACH_IND，
//                 对应结构名称作相应修改
//              5、DIAG_CMD_LTE_DETACH_IND_STRU去除ulRc字段
//              6、DIAG_CMD_LTE_CFG_REQ_STRU添加ulIPV4AddrAllocType，表示IPv4地址分配方式
//  3.日    期 : 2009年11月17日
//    作    者 : 郭成钢/00149569
//    修改内容 : 
//              1、DIAG_CMD_LTE_ATTACH_CNF_STRU删除ulCsServiceStatus、ulPsServiceStatus和ulAttachType字段，
//              2、DIAG_CMD_LTE_ATTACH_IND_STRU删除ulCsServiceStatus、ulPsServiceStatus字段
//              3、DIAG_CMD_LTE_DETACH_CNF_STRU删除ulCsServiceStatus、ulPsServiceStatus和ulDetachType字段，
//              4、DIAG_CMD_LTE_DETACH_IND_STRU删除ulCsServiceStatus、ulPsServiceStatus和ulDetachType字段，
//                 添加ulDetEntityType，标识Detach发起实体，
//              5、DIAG_CMD_LTE_SET_PH_RA_REQ_STRU添加ulSetType，标识操作类型，0: 设置,1: 删除，
//              6、DIAG_CMD_LTE_SET_TFT_REQ_STRU结构根据AT调整字段（根据理解和确认结果调整）
//              7、调整DIAG_CMD_PDP_SETUP_CNF_STRU和DIAG_CMD_PDP_SETUP_IND_STRU，添加返回信息
//  4.日    期 : 2009年11月19日
//    作    者 : 郭成钢/00149569
//    修改内容 :
//              1、新增吞吐量相关查询结构DIAG_CMD_LTE_THROUGHPUT_REQ_STRU,DIAG_CMD_LTE_THROUGHPUT_CNF_STRU
//                 DIAG_CMD_LTE_THROUGHPUT_IND_STRU
//              2、DIAG_CMD_SIM_PIN_QRY_REQ_STRU的ulPinType字段添加0xFFFFFFFF取值，表示查询待验证PIN码
//                 DIAG_CMD_SIM_PIN_QRY_CNF_STRU添加ulPinType字段
//              3、DIAG_CMD_LTE_CFG_REQ_STRU和DIAG_CMD_LTE_CFG_CNF_STRU添加ulCid字段，标示设置的Cid
//  5.日    期 : 2009年11月22日
//    作    者 : 郭成钢/00149569
//    修改内容 :
//              1、删除结构DIAG_CMD_LTE_CSQ_IND_STRU
//              2、DIAG_CMD_LTE_ATTACH_IND_STRU添加ulRst字段
//              3、添加ACTIVE、ACTIVE_IND命令相关结构
//              4、添加DEACTIVE、DEACTIVE_IND命令相关结构
//  6.日    期 : 2009年11月23日
//    作    者 : 郭成钢/00149569
//    修改内容 :
//              1、新增SIM操作类结构
//              2、DIAG_CMD_PDP_ACTIVE_REQ_STRU删除APN,PDN,TFT和QOS等设置项
//              3、DIAG_CMD_LTE_SET_PH_RA_REQ_STRU删除ulSetType字段
//              4、去除所有的ulSetType字段
//              5、删除DIAG_CMD_LTE_SET_BEARER_TYPE命令对应结构
//  7.日    期 : 2009年11月30日
//    作    者 : 郭成钢/00149569
//    修改内容 :
//              1、DIAG_CMD_SET_PDP_MANAGER_TYPE_IND_STRU增加ulTimeout字段标示超时时间
//
//*****************************************************************************

#ifndef __DIAG_SYS_CMD_PARAM_PLUGIN_H__
#define __DIAG_SYS_CMD_PARAM_PLUGIN_H__

#include "diag_cmd_id.h"

#define DIAG_CMD_CYC_IND_INTERVAL    (200)

#define DIAG_CMD_CMD_PRE HI_U32 ulFix; \
    HI_U16 usFrm; \
    HI_U16 usSubFrm;

//*****************************************************************************
// 描述 : 设置空闲任务CPU占用率
// ID   : DIAG_CMD_CPU_INFO_SWT 
// REQ  : DIAG_CMD_CPU_INFO_SWT_REQ_STRU 
// CNF  : DIAG_CMD_CPU_INFO_SWT_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_CYC_IND_DEFAULT     (2)
#define DIAG_CMD_CYC_IND_START       (1)
#define DIAG_CMD_CYC_IND_STOP        (0)

typedef struct  
{
    HI_U16 usSwt;
    HI_U16 usPeriod;
} DIAG_CMD_CPU_INFO_SWT_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_CPU_INFO_SWT_CNF_STRU;


//*****************************************************************************
// 描述 : 空闲任务CPU任务占用率百分比上报
// ID   : DIAG_CMD_CPU_INFO_IND
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_CPU_INFO_IND_STRU
// 说明 : ... 
//*****************************************************************************
typedef struct  
{
    DIAG_CMD_CMD_PRE

    HI_U32 ulBaseCnt; // 基础计数(1s)
    HI_U32 ulIdleCnt; // 空闲计数(暂定1s)，HSO计算CPU占用率需1 - ulIdleCnt/ulBaseCnt
    HI_U32 ulMaxCnt;  // 最大计数
} DIAG_CMD_CPU_INFO_IND_STRU;


//*****************************************************************************
// 描述 : 设置空闲任务CPU占用率
// ID   : DIAG_CMD_PACKET_LOST_SWT 
// REQ  : DIAG_CMD_PACKET_LOST_SWT_REQ_STRU 
// CNF  : DIAG_CMD_PACKET_LOST_SWT_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U16 usSwt;
    HI_U16 usPeriod;
} DIAG_CMD_PACKET_LOST_SWT_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_PACKET_LOST_SWT_CNF_STRU;


//*****************************************************************************
typedef struct  
{
    HI_U32 ulGtrDtaSize;
    HI_U8 aucDta[0];
} DIAG_CMD_GTR_SET_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_GTR_SET_CNF_STRU;

// 描述 : 空闲任务CPU任务占用率百分比上报
// ID   : DIAG_CMD_PACKET_LOST_IND
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_PACKET_LOST_IND_STRU
// 说明 : ... 
//*****************************************************************************

enum DIAG_PACKET_LOST_ENUM
{
    DIAG_PACKET_LOST_INVALID_PARAMETER                  = 0,
    DIAG_PACKET_LOST_NO_INITILIZATION                   = 1,
    DIAG_PACKET_LOST_QUEUE_FULL                         = 2,
    DIAG_PACKET_LOST_MALLOC_FAILURE,
    DIAG_PACKET_LOST_PACK_ERR,
    DIAG_PACKET_LOST_MUX_WR_FAILURE,
    DIAG_PACKET_LOST_DSP_MAIL_TOTAL_LEN_ERR,   // 记录DSP邮箱异常
    DIAG_PACKET_LOST_DSP_MAIL_MSG_LEN_ERR,   // 记录DPS邮箱异常
    DIAG_PACKET_LOST_BUTT
};

typedef HI_U32 DIAG_PACKET_LOST_ENUM_U32;

typedef struct _DIAG_PACKET_LOST_INFO
{
    DIAG_PACKET_LOST_ENUM_U32 ulType;   // 丢包原因类型
    HI_U32 ulCnt;                        // 记录最后一次丢包发生的原因
} DIAG_PACKET_LOST_INFO;

typedef struct  
{
    DIAG_CMD_CMD_PRE
    HI_U32 ulPreCnt;                     // 上次上报的丢包数
    HI_U32 ulCnt;                        // 总共的丢包数
    HI_U32 ulTypeCnt;                    // 产生丢包的类型数
    DIAG_PACKET_LOST_INFO astPackLostInfo[DIAG_PACKET_LOST_BUTT];
} DIAG_CMD_PACKET_LOST_IND_STRU;


//*****************************************************************************
// 描述 : 设置空闲任务CPU占用率
// ID   : DIAG_CMD_QUEUE_FULL_SWT 
// REQ  : DIAG_CMD_QUEUE_FULL_SWT_REQ_STRU 
// CNF  : DIAG_CMD_QUEUE_FULL_SWT_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U16 usSwt;
    HI_U16 usPeriod;
} DIAG_CMD_QUEUE_FULL_SWT_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_QUEUE_FULL_SWT_CNF_STRU;


//*****************************************************************************
// 描述 : 空闲任务CPU任务占用率百分比上报
// ID   : DIAG_CMD_QUEUE_FULL_IND
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_QUEUE_FULL_IND_STRU
// 说明 : ... 
//*****************************************************************************
typedef struct _DIAG_MUX_QUEUE_FULL_INFO
{
    HI_U32 ulLastCnt;                          // 上次记录的队列满数
    HI_U32 ulCnt;                              // 产生队列满次数
} DIAG_MUX_QUEUE_FULL_INFO;

typedef struct  
{
    DIAG_CMD_CMD_PRE
    DIAG_MUX_QUEUE_FULL_INFO stDSPQueueFullCnt;     // DSP队列满统计
    DIAG_MUX_QUEUE_FULL_INFO stPSQueueFullCnt;      // PS队列满统计
} DIAG_CMD_QUEUE_FULL_IND_STRU;


//*****************************************************************************
// 描述 : 设置内存分配失败上报
// ID   : DIAG_CMD_MALLOC_FAILURE_SWT
// REQ  : DIAG_CMD_MALLOC_FAILURE_SWT_REQ_STRU 
// CNF  : DIAG_CMD_MALLOC_FAILURE_SWT_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U16 usSwt;
    HI_U16 usPeriod;
} DIAG_CMD_MALLOC_FAILURE_SWT_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_MALLOC_FAILURE_SWT_CNF_STRU;


//*****************************************************************************
// 描述 : 空间分配失败个数上报
// ID   : DIAG_CMD_MALLOC_FAILURE_IND
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_MALLOC_FAILURE_IND_STRU
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_MOD_MALLOC_ERR_CNT                            (1)

typedef struct  
{
    HI_U32 ulId;
    HI_U32 ulMallocErrCnt;
} DIAG_CMD_MALLOC_ERR_MOD_INFO_STRU;

typedef struct  
{
    DIAG_CMD_CMD_PRE
    HI_U16 usPreCnt;
    HI_U16 usMallocErrCnt;
    HI_U32 ulErrModCnt;
    DIAG_CMD_MALLOC_ERR_MOD_INFO_STRU astMallocErrMod[DIAG_CMD_MOD_MALLOC_ERR_CNT];
} DIAG_CMD_MALLOC_FAILURE_IND_STRU;


//*****************************************************************************
// 描述 : 设置LTE网络无线接入模式 
// ID   : DIAG_CMD_LTE_SET_PH_RA_MODE 
// REQ  : DIAG_CMD_LTE_SET_PH_RA_REQ_STRU 
// CNF  : DIAG_CMD_LTE_SET_PH_RA_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
	// 根据运营商要求定制，
    // 暂仅支持2和3两种模式，默认设为 2 (LTE-FDD)
    // 0: WCDMA; 1: GSM-GPRS; 2: LTE-FDD模式; 3: LTE-TDD模式; 
    HI_U32 ulPhRaMode;
} DIAG_CMD_LTE_SET_PH_RA_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_LTE_SET_PH_RA_CNF_STRU;


//*****************************************************************************
// 描述 : LTE网络连接相关参数设置 
// ID   : DIAG_CMD_LTE_CFG 
// REQ  : DIAG_CMD_LTE_CFG_REQ_STRU 
// CNF  : DIAG_CMD_LTE_CFG_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct
{
	// 根据运营商要求定制，
    // 暂仅支持2和3两种模式，默认设为 2 (LTE-FDD)
    // 0: WCDMA; 1: GSM-GPRS; 2: LTE-FDD模式; 3: LTE-TDD模式; 
    //HI_U32 ulPhRaMode;      
    HI_U32 ulCid;               // 配置Cid
    HI_U32 ulPdn;               // 1: 表示IPV4(缺省值); 2:表示IPV6; 3: IPV4&IPV6
    HI_U32 ulIPV4AddrAllocType; // 1: 通过NAS信令方式;  2: 通过DHCP方式
	HI_U8 aucApnName[101];      // APN 名称,(最多100位APN + 字符串结尾字符'\0')
    HI_U8 aucReserved[3];       // 保留字段
    // TODO ... 
} DIAG_CMD_LTE_CFG_REQ_STRU;

typedef struct
{
    HI_U32 ulCid; // Cid
    HI_U32 ulRc;  // 结果码
} DIAG_CMD_LTE_CFG_CNF_STRU;


//*****************************************************************************
// 描述 : LTE网络连接状态查询接口
// ID   : DIAG_CMD_UE_NET_STATUS_QRY 
// REQ  : DIAG_CMD_UE_NET_STATUS_QRY_REQ_STRU 
// CNF  : DIAG_CMD_UE_NET_STATUS_QRY_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_NET_STATUS_CONN         (0)
#define DIAG_CMD_NET_STATUS_DISCONN      (1)

typedef struct  
{
    HI_U32 ulRc;        // 结果码
    HI_U32 ulNetStatus; // 0: 表示连接, 1: 表示断开;
} DIAG_CMD_UE_NET_STATUS_QRY_CNF_STRU;


//*****************************************************************************
// 描述 : 关机
// ID   : DIAG_CMD_LTE_STOP 
// REQ  : DIAG_CMD_LTE_STOP_REQ_STRU 
// CNF  : DIAG_CMD_LTE_STOP_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U32 ulReserved; // 保留字
} DIAG_CMD_LTE_STOP_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc; // 结果码 
} DIAG_CMD_LTE_STOP_CNF_STRU;


//*****************************************************************************
// 描述 : 附着 
// ID   : DIAG_CMD_LTE_ATTACH
// REQ  : DIAG_CMD_LTE_ATTACH_REQ_STRU
// CNF  : DIAG_CMD_LTE_ATTACH_CNF_STRU
// IND  : DIAG_CMD_LTE_ATTACH_IND_STRU 
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_ATTACH_TYPE_PS         (1)
#define DIAG_CMD_ATTACH_TYPE_CS         (2)
#define DIAG_CMD_ATTACH_TYPE_PPOM       (3)

typedef struct 
{
    HI_U32 ulAttachType;       // 1 :PS附着(缺省值) 
                              // 2 :CS附着
                              // 3 :PS和CS联合附着
} DIAG_CMD_LTE_ATTACH_REQ_STRU;  

typedef struct 
{
    HI_U32 ulRc;               // 结果码
} DIAG_CMD_LTE_ATTACH_CNF_STRU;  

typedef struct 
{
    HI_U32 ulRst;
    HI_U32 ulAttachType;       // 1 :PS附着(缺省值) 
                              // 2 :CS附着
                              // 3 :PS和CS联合附着
} DIAG_CMD_LTE_ATTACH_IND_STRU;  // 网络发起的IND


//*****************************************************************************
// 描述 : 去附着
// ID   : DIAG_CMD_LTE_DETACH
// REQ  : DIAG_CMD_LTE_DETACH_REQ_STRU
// CNF  : DIAG_CMD_LTE_DETACH_CNF_STRU
// IND  : DIAG_CMD_LTE_DETACH_IND_STRU 
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_DETACH_TYPE_PS         (1)
#define DIAG_CMD_DETACH_TYPE_CS         (2)
#define DIAG_CMD_DETACH_TYPE_PPOM       (3)

typedef struct 
{
    HI_U32 ulDetachType;       // 1: PS附着(缺省值) 
                              // 2: CS附着
                              // 3: PS和CS联合附着
} DIAG_CMD_LTE_DETACH_REQ_STRU;  

typedef struct 
{
    HI_U32 ulRc; // 结果码
} DIAG_CMD_LTE_DETACH_CNF_STRU;  


typedef struct 
{
    HI_U32 ulDetEntityType;    // 1: ME,UE发起Detach, 2: NW,网侧发起Detach
} DIAG_CMD_LTE_DETACH_IND_STRU;


//*****************************************************************************
// 描述 : 当前服务小区信号强度上报
// ID   : DIAG_CMD_LTE_RSSI_IND
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_LTE_RSSI_IND_STRU
// 说明 : ... 
//*****************************************************************************
typedef struct  
{
    HI_S32 rssi; // 整型值,单位dBm,接收信号强度指示。
} DIAG_CMD_LTE_RSSI_IND_STRU;


//*****************************************************************************
// 描述 : 当前服务小区信道误码率上报
// ID   : DIAG_CMD_LTE_BER_IND
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_LTE_BER_IND_STRU
// 说明 : ... 
//*****************************************************************************
typedef struct  
{
    HI_S32 ber;  // 0..7: 比特误码率百分比。
} DIAG_CMD_LTE_BER_IND_STRU;


//*****************************************************************************
// 描述 : 连接信息上报
// ID   : DIAG_CMD_LTE_CONNECTION_IND 
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_LTE_CONNECTION_IND_STRU 
// 说明 : ... 
//*****************************************************************************
typedef struct  
{
    HI_U32 ulSpeedUL; // UL bps 
    HI_U32 ulSpeedDL; // DL bps 
} DIAG_CMD_LTE_CONNECTION_IND_STRU;


//*****************************************************************************
// 描述 : 连接信息上报
// ID   : DIAG_CMD_LTE_REG_STAT_IND 
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_LTE_REG_STAT_IND_STRU 
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_REG_STAT_NOT_REG_AND_NOT_SRCH_OPERATOR    (0)
#define DIAG_CMD_REG_STAT_REG_HPLMN                        (1)
#define DIAG_CMD_REG_STAT_NOT_REG_AND_SRCH_OPERATOR        (2)
#define DIAG_CMD_REG_STAT_REG_DENIED                       (3)
#define DIAG_CMD_REG_STAT_UNKNOWN                          (4)
#define DIAG_CMD_REG_STAT_REG_ROAMING                      (5)

typedef struct  
{
    // 网络注册状态，1和5为注册状态，其他为未注册状态
    // 0: NOT_REG_AND_NOT_SRCH_OPERATOR,
    // 1: REG_HPLMN
    // 2: NOT_REG_AND_SEARCH_OPERATOR
    // 3: REG_DENIED
    // 4: UNKNOWN
    // 5: REG_ROAMING
    HI_U32  ulRegStatus; 
    HI_CHAR szPlmnId[8]; // PLMN(MCC(3)+MNC(2~3))
} DIAG_CMD_LTE_REG_STAT_IND_STRU;


//*****************************************************************************
// 描述 : 吞吐量统计信息上报
// ID   : DIAG_CMD_LTE_THROUGHPUT
//        DIAG_CMD_LTE_THROUGHPUT_IND
// REQ  : DIAG_CMD_LTE_THROUGHPUT_REQ_STRU
// CNF  : DIAG_CMD_LTE_THROUGHPUT_CNF_STRU
// IND  : DIAG_CMD_LTE_THROUGHPUT_IND_STRU 
// 说明 : ... 
//*****************************************************************************
typedef struct
{
    HI_U32 ulCmdType;   // 0: 停止,1: 启动
    HI_U32 ulRptPeriod; // ms为单位，用来控制IND上报速率
} DIAG_CMD_LTE_THROUGHPUT_REQ_STRU;

typedef struct
{
    HI_U32 ulRst;
} DIAG_CMD_LTE_THROUGHPUT_CNF_STRU;

typedef struct
{
    HI_U32 ulMaxRate;              // 最大速率
    HI_U32 ulRate;                 // 平均速率
    HI_U32 ulPacketsCntOK;         // 成功包数
    HI_U32 ulPacketsCntErr;        // 出错包数
    HI_U32 ulPacketsCntOverflow;   // 溢出包数（未能发送或接收）

    // Packets Cnt Higher Bits
    HI_U32 ulPacketsCntOKH;        // 成功包数
    HI_U32 ulPacketsCntErrH;       // 出错包数
    HI_U32 ulPacketsCntOverflowH;  // 溢出包数（未能发送或接收）
} DIAG_CMD_LTE_THROUGHPUT_INFO;

typedef struct
{
    DIAG_CMD_LTE_THROUGHPUT_INFO stRxThoughputInfo; 
    DIAG_CMD_LTE_THROUGHPUT_INFO stTxThoughputInfo;
} DIAG_CMD_LTE_THROUGHPUT_IND_STRU;


//*****************************************************************************
// 描述 : 连接诊断信息上报
// ID   : DIAG_CMD_UE_CONNECT_DIAG_INFO_IND 
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_UE_CONNECT_DIAG_INFO_IND_STRU 
// 说明 : ... 
//*****************************************************************************
typedef struct  
{
    HI_CHAR acText[80];
} DIAG_CMD_UE_CONNECT_DIAG_INFO_IND_STRU;


//*****************************************************************************
// 描述 : 设置SDF的QoS参数
// ID   : DIAG_CMD_LTE_SET_EPS_QOS
// REQ  : DIAG_CMD_LTE_SET_EPS_QOS_REQ_STRU
// CNF  : DIAG_CMD_LTE_SET_EPS_QOS_CNF_STRU
// IND  :  
// 说明 : ... 
//*****************************************************************************
typedef struct 
{
    HI_U8 ucQCI;         // 取值范围待确认
    HI_U8 aucRsv[3];
    HI_U32 ulULMaxRate;
    HI_U32 ulDLMaxRate;
    HI_U32 ulULGMaxRate;
    HI_U32 ulDLGMaxRate;
} EPS_QOS_INFO_STRU;

typedef struct 
{
    HI_U32 ulCid;
    HI_U32 ulLinkCid;
    EPS_QOS_INFO_STRU stEPSQoSInfo;
} DIAG_CMD_LTE_SET_EPS_QOS_REQ_STRU;  

typedef struct 
{
    HI_U32 ulRc; // 结果码 
    HI_U32 ulCid;
    EPS_QOS_INFO_STRU stEPSQoSInfo;
} DIAG_CMD_LTE_SET_EPS_QOS_CNF_STRU;  


//*****************************************************************************
// 描述 : 设置SDF上下文的TFT信息
// ID   : DIAG_CMD_LTE_SET_TFT
// REQ  : DIAG_CMD_LTE_SET_TFT_REQ_STRU
// CNF  : DIAG_CMD_LTE_SET_TFT_CNF_STRU
// IND  :  
// 说明 : ... 
//*****************************************************************************

#define DIAG_MAX_IPV4_ADDR_LEN              (4)

#define DIAG_MAX_IPV6_ADDR_LEN              (16)

#define DIAG_CMD_TFT_INFO_RMT_IPV4          (0x00000001)
#define DIAG_CMD_TFT_INFO_RMT_IPV6          (0x00000002)
#define DIAG_CMD_TFT_INFO_PROTOCOLID        (0x00000004)
#define DIAG_CMD_TFT_INFO_LC_PORT_RANGE     (0x00000008)
#define DIAG_CMD_TFT_INFO_RMT_PORT_RANGE    (0x00000010)
#define DIAG_CMD_TFT_INFO_SECU_PARA_INDEX   (0x00000020)
#define DIAG_CMD_TFT_INFO_TYPE_OF_SERVICE   (0x00000040)
#define DIAG_CMD_TFT_INFO_FLOW_LABEL_TYPE   (0x00000080)
#define DIAG_CMD_TFT_INFO_DIRECTION         (0x00000100)

typedef struct 
{
    HI_U32 ulSettingField;
    HI_U32 ulSecuParaIndex;
    HI_U16 usLcPortHighLimit;
    HI_U16 usLcPortLowLimit;
    HI_U16 usRmtPortHighLimit;
    HI_U16 usRmtPortLowLimit;
    HI_U8 ucPacketFilterId;
    HI_U8 ucPrecedence;
    HI_U8 ucProtocolId;
    HI_U8 ucTypeOfService;
    HI_U8 aucRmtIpv4Address[DIAG_MAX_IPV4_ADDR_LEN];
    HI_U8 aucRmtIpv4Mask[DIAG_MAX_IPV4_ADDR_LEN];
    HI_U8 aucRmtIpv6Address[DIAG_MAX_IPV6_ADDR_LEN];
    HI_U8 aucRmtIpv6Mask[DIAG_MAX_IPV6_ADDR_LEN];
    HI_U8 ucTypeOfServiceMask;
    HI_U8 ucDirection;
    HI_U8 aucReserved[2];
    HI_U32 ulFlowLabelType;
} DIAG_TFT_INFO_STRU;

// 部分PS未实现字段取值待确认
typedef struct 
{
    HI_U32 ulCid;
    DIAG_TFT_INFO_STRU stTFTInfo;
} DIAG_CMD_LTE_SET_TFT_REQ_STRU;  

typedef struct 
{
    HI_U32 ulRc; // 结果码 
    HI_U32 ulCid;
} DIAG_CMD_LTE_SET_TFT_CNF_STRU;  


//*****************************************************************************
// 描述 : 承载激活应答管理
// ID   : DIAG_CMD_SET_PDP_MANAGER_TYPE
//        DIAG_CMD_PDP_MANAGER_IND
//        DIAG_CMD_PDP_MANAGER_RSP
// REQ  : DIAG_CMD_SET_PDP_MANAGER_TYPE_REQ_STRU
// CNF  : DIAG_CMD_SET_PDP_MANAGER_TYPE_CNF_STRU
// IND  : 
// 说明 : ... 
//*****************************************************************************
typedef struct 
{
    HI_U32 ulAnswerMode;       // 0: 自动，1: 手动
    HI_U32 ulAnserRst;         // 0: 接收，1: 拒绝
    HI_U32 ulTimeout;          // 超时时间, ms为单位
} DIAG_CMD_SET_PDP_MANAGER_TYPE_REQ_STRU;  

typedef struct 
{
    HI_U32 ulRc;               // 结果码 
} DIAG_CMD_SET_PDP_MANAGER_TYPE_CNF_STRU;

typedef struct 
{
    HI_U32 ulCid;              // Cid
    HI_U32 ulOperateType;      // 0: 缺省承载激活，1: 专有承载激活，2: 承载修改
    HI_U32 ulBearerModifyType; // 0: TFT, 1: QOS, 2: BOTH
    HI_U32 ulTimeout;          // 用户回复IND的超时设定, ms为单位, 超过该时间未反馈则自动接受
} DIAG_CMD_SET_PDP_MANAGER_TYPE_IND_STRU;

typedef struct 
{
    HI_U32 ulCid;              // Cid
    HI_U32 ulSetupRst;         // 0: 接受请求，1: 不接受请求
} DIAG_CMD_SET_PDP_MANAGER_TYPE_RSP_STRU;


//*****************************************************************************
// 描述 : 查询当前注册的PLMN 
// ID   : DIAG_CMD_LTE_PLMN_QRY  
// REQ  : DIAG_CMD_LTE_PLMN_QRY_REQ_STRU
// CNF  : DIAG_CMD_LTE_PLMN_QRY_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  

typedef struct  
{
    HI_U32 mode;   // 0: Automatic mode; <oper> field is ignored; 1 Manual operator selection;
                  // 2 Manually deregister from network and remain unregistered until <mode>=0 or 1 or 4 is selected. 
                  // 4 Automatic / manual selection; if  manual selection fails, automatic mode (<mode>=0) is entered. 

    HI_CHAR szOperName[32]; // Operator name in string format 
} DIAG_CMD_LTE_PLMN_QRY_REQ_STRU;

typedef struct  
{
    HI_U32 ulRet;
    HI_U32 mode;
    HI_U8 oper[32];         // Operator name in numeric format 
    HI_CHAR szOperName[32]; // Operator name in numeric format 
} DIAG_CMD_LTE_PLMN_QRY_CNF_STRU;


//*****************************************************************************
// 描述 : 查询卡状态
// ID   : DIAG_CMD_SIM_STATUS_QRY   
// REQ  : DIAG_CMD_SIM_STATUS_QRY_REQ_STRU
// CNF  : DIAG_CMD_SIM_STATUS_QRY_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  

typedef struct  
{
    HI_U32 ulRc;         // 查询结果
    HI_U32 ulCardStatus; // 卡状态
    HI_U32 ulCardType;   // 卡类型
    HI_U32 ulActiveType; // 卡激活类型
} DIAG_CMD_SIM_STATUS_QRY_CNF_STRU;


//*****************************************************************************
// 描述 : 查询PIN
// ID   : DIAG_CMD_SIM_PIN_QRY   
// REQ  : DIAG_CMD_SIM_PIN_QRY_REQ_STRU
// CNF  : DIAG_CMD_SIM_PIN_QRY_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_PIN_TYPE_ALL             (0xFF)
#define DIAG_CMD_PIN_TYPE_PIN             (0)
#define DIAG_CMD_PIN_TYPE_PIN2            (1)
#define DIAG_CMD_PIN_TYPE_PUK             (2)
#define DIAG_CMD_PIN_TYPE_PUK2            (3)

typedef struct  
{
    // 0: 表示PIN1; 1: 表示PIN2; 2: 表示PUK1; 3: 表示PUK2, 
    // 0xFFFFFFFF: 表示查询待验证PIN码
    HI_U32 ulPinType;
} DIAG_CMD_SIM_PIN_QRY_REQ_STRU;

typedef struct  
{
    HI_U8 ucPinType; // 待验证PIN码
    HI_U8 ucStatus;  // 0: Ready; 1:Verified; 2:Blocked.
    HI_U8 ucEnable;  // 1: ulStatus有效; 0:ulStatus无效; 无需输入PIN码;
    HI_U8 ucRetries; // Retries left.
} DIAG_CMD_SIM_PIN_INFO;

typedef struct
{
    HI_U32 ulRc;     // 结果码
    DIAG_CMD_SIM_PIN_INFO stPinInfo;
} DIAG_CMD_SIM_PIN_QRY_CNF_STRU;


//*****************************************************************************
// 描述 : 设置PIN
// ID   : DIAG_CMD_SIM_PIN_SET 
// REQ  : DIAG_CMD_SIM_PIN_SET_REQ_STRU
// CNF  : DIAG_CMD_SIM_PIN_SET_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    // 无论时什么Action, 总是需需要输入密码, 其中UnLock时候需要输入PUK1/PUK2.
    // 不使用数组元素设为'/0'
    HI_CHAR OldPin[8];
    HI_CHAR NewPin[8];    // 只有在Modified/UnLock 动作时候才使用,不使用数组元素设为'/0'
    HI_U8 ucType;         // 0: 表示PIN1; 1: 表示PIN2; 2: 表示PUK1; 3: 表示PUK2
    HI_U8 ucAction;       // 1:Verified; 2:Enable; 3:Disable; 4:UnLock; 5: Modified;
    HI_U8 aucReserved[2]; // padding
} DIAG_CMD_SIM_PIN_SET_REQ_STRU;

typedef struct 
{
    HI_U32 ulRc;          // 结果码 
    HI_U8 ucType;         // 0: 表示PIN1; 1: 表示PIN2; 2: 表示PUK1; 3: 表示PUK2
    HI_U8 ucAction;       // 1:Verified; 2:Enable; 3:Disable; 4:UnLock; 5: Modified;
    HI_U8 ucStatus;       // 0: Ready; 1:Verified; 2:Blocked.
    HI_U8 ucRetries;      // Retries left.
} DIAG_CMD_SIM_PIN_SET_CNF_STRU;


//*****************************************************************************
// 描述 : 读取SIM文件
// ID   : DIAG_CMD_SIM_GET_FILE
//        DIAG_CMD_SIM_GET_FILE_IND
// REQ  : DIAG_CMD_SIM_GET_FILE_REQ_STRU
// CNF  : DIAG_CMD_SIM_GET_FILE_CNF_STRU
// IND  : DIAG_CMD_SIM_GET_FILE_IND_STRU
// 说明 : ... 
//*****************************************************************************  

typedef struct  
{
    HI_U16 usEFId;
    HI_U8 ucRecordNo;     // 0: 所有记录, 其他: 指定记录(1~255)
    HI_U8 ucReserved;     // padding字段
} DIAG_CMD_SIM_GET_FILE_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc;          // 查询结果
    HI_U16 usEFId;        // 文件ID
    HI_U8  ucRecordNum;   // 记录号
    HI_U8  ucRecordCnt;   // 记录总数
    HI_U8  ucRecordLen;   // 单个记录长度(透明文件为文件长度)
    HI_U8  ucReserved;    // Padding
    HI_U16 usRecordsSize; // 返回记录总长度
} DIAG_CMD_SIM_GET_FILE_CNF_STRU;

typedef struct  
{
    HI_U16 usEFId;
    HI_U8  ucRecordNo;
    HI_U8  ucRecordLen;
    HI_U8  aucRecord[0];
} DIAG_CMD_SIM_GET_FILE_IND_STRU;


//*****************************************************************************
// 描述 : 写SIM文件
// ID   : DIAG_CMD_SIM_WR_FILE 
// REQ  : DIAG_CMD_SIM_WR_FILE_REQ_STRU
// CNF  : DIAG_CMD_SIM_WR_FILE_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U16 usEFId;       // 文件ID
    HI_U8  ucRecordNo;   // 记录号
    HI_U8  ucRecordLen;  // 写入长度
    HI_U8  aucRecord[0]; // 写入的数据
} DIAG_CMD_SIM_WR_FILE_REQ_STRU;

typedef struct 
{
    HI_U32 ulRc;         // 结果码 
    HI_U16 usEFId;       // 文件ID
    HI_U8  ucRecordNo;   // 记录号
    HI_U8  ucReserved;   // padding
} DIAG_CMD_SIM_WR_FILE_CNF_STRU;


//*****************************************************************************
// 描述 : 查询当前的IMSI号
// ID   : DIAG_CMD_SIMM_IMSI_QRY  
// REQ  : DIAG_CMD_SIM_IMSI_QRY_REQ_STRU
// CNF  : DIAG_CMD_SIM_IMSI_QRY_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  


typedef struct
{
    HI_U32 ulRc;      // 结果码 
    HI_CHAR szImsi[16];
} DIAG_CMD_SIM_IMSI_QRY_CNF_STRU;


//*****************************************************************************
// 描述 : 查询当前的IMEI号
// ID   : DIAG_CMD_UE_IMEI_QRY
// REQ  : DIAG_CMD_UE_IMEI_QRY_REQ_STRU
// CNF  : DIAG_CMD_UE_IMEI_QRY_CNF_STRU
// IND  : - 
// 说明 : ... 
//*****************************************************************************

typedef struct 
{
	HI_U32 ulRc;
    
	// IMEI码的前六位数字即TAC码,TAC码代表了终端的型号
	// IMEI码的7、8位即FAC码，其含义是指手机产地,比如80中国
	// IMEI码的9～14位即为SNR码，是手机的出厂序号
	// IMEI码的15位,SP(备用号码)
    HI_CHAR szImei[16];
} DIAG_CMD_UE_IMEI_QRY_CNF_STRU;


//*****************************************************************************
// 描述 : 查询电源状态, 能表示直流还是交流电，能表示当前电量
// ID   : DIAG_CMD_POWER_INFO_IND 
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_POWER_INFO_IND 
// 说明 : ... 
//*****************************************************************************
#define DIAG_CMD_POWER_INFO_DC       (0)
#define DIAG_CMD_POWER_INFO_AC       (1)

typedef struct 
{
	HI_U32 ulRc; 
	HI_U32 ulAcOrDc;         // 表示直流还是交流电连接0: 供电为直流 DC; 1:供电为交流电 AC 
	HI_U8  ucPowerPercent;   // 当前电量百分比
} DIAG_CMD_POWER_INFO_IND_STRU;  


//*****************************************************************************
// 描述 : DUMP 指定地址的内容
// ID   : DIAG_CMD_MEM_DUMP
// REQ  : DIAG_CMD_MEM_DUMP_REQ_STRU
// CNF  : DIAG_CMD_MEM_DUMP_CNF_STRU
// IND  : DIAG_CMD_MEM_DUMP_IND_STRU
// 说明 : ... 
//*****************************************************************************
typedef struct  
{
    HI_U32 ulAddr;   // the address to read.
    HI_U32 ulSize;   // the length to read in bytes.
} DIAG_CMD_MEM_DUMP_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc;
} DIAG_CMD_MEM_DUMP_CNF_STRU;

typedef struct
{
    HI_U32 ulRc;
    HI_U32 ulAddr;
    HI_U32 ulSize;
    HI_U8  pData[0];
} DIAG_CMD_MEM_DUMP_IND_STRU;


//*****************************************************************************
// 描述 : 读指定寄存器数据
// ID   : DIAG_CMD_REG_RD
// REQ  : DIAG_CMD_REG_RD_REQ_STRU
// CNF  : DIAG_CMD_REG_RD_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U32 ulRegAddr;                    // the address to read.
} DIAG_CMD_REG_RD_REQ_STRU;             // 如ARM、RTT的寄存器.

typedef struct  
{
    HI_U32 ulRc;                         // ERR_MSP_XXXXXX等结果码
    HI_U32 ulSize;                       // 若失败,返回结果为0, 若不为零,则包含数据(是顺序数据)
    HI_U8  aucData[0];                   // 顺序存放,数据较大时候,会风序列发送,数据对应所REQ内存地址
} DIAG_CMD_REG_RD_CNF_STRU;


//*****************************************************************************
// 描述: 写指定寄存器数据
// ID  : DIAG_CMD_REG_WR
// REQ : DIAG_CMD_REG_WR_REQ_STRU
// CNF : DIAG_CMD_REG_WR_CNF_STRU
// IND : -
//*****************************************************************************
typedef struct  
{
    HI_U32 ulAddr;         
    HI_U32 ulRegValue;         
} DIAG_CMD_REG_WR_REQ_STRU;

typedef struct  
{
	HI_U32 ulRc;  
} DIAG_CMD_REG_WR_CNF_STRU;

//*****************************************************************************
// 描述 : 写入指定内存数据, 该指令慎用,需要准确知道需要写入的内存
//        数据和地址写指定寄存器数据
// ID   : DIAG_CMD_MEM_WR 
// REQ  : DIAG_CMD_MEM_WR_REQ_STRU
// CNF  : DIAG_CMD_MEM_WR_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U32 ulAddr;           // the address to write
    //HI_U32 ulCpuId;        // Specify the CPU ID. TO DO ...
    HI_U32 ulDataSize;       // the length to write in bytes.
    HI_U8 pData[0];          // 待写入的二进制数据
} DIAG_CMD_MEM_WR_REQ_STRU;

typedef struct
{
    HI_U32 ulRc;
} DIAG_CMD_MEM_WR_CNF_STRU;


//*****************************************************************************
// 描述 : 读指令内存区域数据
// ID   : DIAG_CMD_MEM_RD 
// REQ  : DIAG_CMD_MEM_RD_REQ_STRU
// CNF  : DIAG_CMD_MEM_RD_CNF_STRU
// IND  : -
// 说明 : ... 
//*****************************************************************************  
typedef struct  
{
    HI_U32 ulAddr;   // the address to read.
    HI_U32 ulSize;   // the length to read in bytes.
} DIAG_CMD_MEM_RD_REQ_STRU;

typedef struct  
{
	HI_U32 ulRc;
    HI_U32 ulSize;
    HI_U8  pData[0];
} DIAG_CMD_MEM_RD_CNF_STRU;



//*****************************************************************************
// 描述 : UE开机上报信息
// ID   : DIAG_CMD_UE_POWERON_IND 
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_UE_POWERON_IND_STRU
// 说明 : 
//*****************************************************************************  
#define DIAG_CMD_POWER_ON_STATUS_KEY     0 // 按键开机; 
#define DIAG_CMD_POWER_ON_STATUS_USB     1 // USB开机
#define DIAG_CMD_POWER_ON_STATUS_EXP     2 // 异常开机
#define DIAG_CMD_POWER_ON_STATUS_RESET   3 // 重启
#define DIAG_CMD_POWER_ON_STATUS_DIR     4 // 直接开机
#define DIAG_CMD_POWER_ON_STATUS_UNKNOWN 5 // 未知方式开机

typedef enum 
{
    EN_UE_MODE_UNKNOWN  =0x00, // UNKNOW
    EN_UE_MODE_GSM      =0x01,  // "GSM"
    EN_UE_MODE_EDGE     =0x02,  // "EDGE"
    EN_UE_MODE_CDMA     =0x04,  // "CDMA"
    EN_UE_MODE_WCDMA    =0x08,  // "WCDMA"
    EN_UE_MODE_UMTS     =0x10,  // "UMTS"
    EN_UE_MODE_HSPA     =0x20,  // "HSPA"
    EN_UE_MODE_LTE_TDD  =0x40,  // "LTE-TDD"
    EN_UE_MODE_LTE_FDD  =0x80  // "LTE-FDD"
}UE_SYS_MODE;

typedef struct  
{
    HI_U32 ulStatus;        // DIAG_CMD_POWER_ON_STATUS_XXX
    HI_U32 ulSysWorkMode;   // 系统工作模式
} DIAG_CMD_UE_POWERON_IND_STRU;
typedef struct  
{
    HI_U32 ulStatus;        // DIAG_CMD_POWER_ON_STATUS_XXX
    HI_U32 ulSysWorkMode;   // 系统工作模式
    UE_SYS_MODE enUeMode;  // UE系统模式
} DIAG_CMD_UE_SYS_STATUS_IND_STRU;


//*****************************************************************************
// 描述 : UE关机上报信息
// ID   : DIAG_CMD_UE_POWEROFF_IND 
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_UE_POWEROFF_IND_STRU
// 说明 : 
//*****************************************************************************  
typedef struct  
{
	HI_U32 ulStatus; // TODO ... 
} DIAG_CMD_UE_POWEROFF_IND_STRU;

//*****************************************************************************
// 描述 : SIM初始化上报信息
// ID   : DIAG_CMD_SIM_INIT_STATUS_IND 
// REQ  : -
// CNF  : -
// IND  : DIAG_CMD_SIM_INIT_STATUS_IND_STRU
// 说明 : 
//*****************************************************************************  
#define DIAG_CMD_SIM_INIT_STATUS_NO_CARD     0 // 没有SIM卡插入 
#define DIAG_CMD_SIM_INIT_STATUS_NORMAL_CARD 1 // 检查到SIM卡为普通卡
#define DIAG_CMD_SIM_INIT_STATUS_TEST_CARD   2 // 检查到SIM卡为测试卡(白卡)
#define DIAG_CMD_SIM_INIT_STATUS_BAD_CARD    3 // 检查到SIM卡为坏卡
typedef struct  
{
	HI_U32 ulRc;
    HI_U32 ulCardStatus;               // DIAG_CMD_SIM_INIT_STATUS_XXX
    DIAG_CMD_SIM_PIN_INFO stPINInfo;  // PIN码验证状态
    DIAG_CMD_SIM_PIN_INFO stPIN2Info; // PIN2码验证状态
} DIAG_CMD_SIM_INIT_STATUS_IND_STRU;


//*****************************************************************************
//  ID: DIAG_CMD_POWER_OFF 在关机之前返回CNF
// REQ: DIAG_CMD_POWER_OFF_REQ_STRU
// CNF: DIAG_CMD_POWER_OFF_CNF_STRU
// IND: None
//*****************************************************************************  
typedef struct  
{
    HI_U32 ulCpuId;
} DIAG_CMD_POWER_OFF_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc;//
} DIAG_CMD_POWER_OFF_CNF_STRU;

//*****************************************************************************
//  ID: DIAG_CMD_UE_RST 在复位之前返回CNF
// REQ: DIAG_CMD_UE_RST_REQ_STRU
// CNF: DIAG_CMD_UE_RST_CNF_STRU
// IND: None
//*****************************************************************************  
typedef struct  
{
    HI_U32 ulCpuId;
} DIAG_CMD_UE_RST_REQ_STRU;

typedef struct  
{
    HI_U32 ulRc;
} DIAG_CMD_UE_RST_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_NV_RD
// REQ    : DIAG_CMD_NV_RD_REQ_STRU
// CNF    : DIAG_CMD_NV_RD_CNF_STRU
// IND    : DIAG_CMD_NV_RD_IND 
//*****************************************************************************

typedef struct  
{
    HI_U32 ulNVId;                       // 待获取的NV项Id
    HI_U32 ulDataSize;                   // 待获取的NV项数据的大小
} DIAG_CMD_NV_RD_REQ_STRU;

typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
} DIAG_CMD_NV_RD_CNF_STRU;

typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulNVId;                       // 获取的NV项Id
    HI_U32 ulDataSize;                   // 获取的NV项数据的大小
    HI_U8  aucData[0];                   // 获取的NV项数据
} DIAG_CMD_NV_RD_IND_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_NV_QRY ：查询一个NV项
// REQ    : DIAG_CMD_NV_QRY_REQ_STRU
// CNF    : DIAG_CMD_NV_QRY_CNF_STRU
// IND    : 
//*****************************************************************************

typedef struct
{
    HI_U32 ulNVId;                       // 待获取的NV项Id
} DIAG_CMD_NV_QRY_REQ_STRU;

typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功, 0表示成功，其他的为错误码.
    HI_U32 ulNVId;                       // 获取的NV项Id
    HI_U32 ulDataSize;                   // 获取的NV项数据的大小
    HI_U8  aucData[0];                   // 获取的NV项数据
} DIAG_CMD_NV_QRY_CNF_STRU;


//*****************************************************************************
// NV文件导出命令
// CMD ID : DIAG_CMD_NV_EXPORT_FILE
// REQ    : DIAG_CMD_NV_EXPORT_FILE_REQ_STRU
// CNF    : DIAG_CMD_NV_EXPORT_FILE_CNF_STRU
// IND    : -
//*****************************************************************************

#define DIAG_CMD_EXPORT_FILE_TYPE_INITIAL       (0)
#define DIAG_CMD_EXPORT_FILE_TYPE_CURRENT       (1)

typedef struct 
{
    HI_U32 ulOffset;   // 请求偏移 
    HI_U32 ulType;     // 0: 导出当前的初始NV文件; 1: 导出当前工作的NV文件
} DIAG_CMD_NV_EXPORT_FILE_REQ_STRU;


#define DIAG_TRANSFER_BLOCK_MAX_SIZE   (2*1024)


typedef struct 
{
    HI_U32 ulRst;
    HI_U32 ulOffset;       // 请求偏移,REQ结构里面的请求偏移
    HI_U32 ulType;         // 到处文件类型, 0: 导出当前的初始NV文件; 1: 导出当前工作的NV文件
    HI_U32 ulRemainSize;   // 剩余NV文件大小
    HI_U32 ulSize;         // 返回的实际大小, 不超过 DIAG_TRANSFER_BLOCK_MAX_SIZE  
    HI_U8  aucData[0];
} DIAG_CMD_NV_EXPORT_FILE_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_SW_VER_QRY
// REQ    : DIAG_CMD_SW_VER_QRY_REQ_STRU
// CNF    : DIAG_CMD_SW_VER_QRY_CNF_STRU
// IND    : NONE 
//*****************************************************************************

#define DIAG_CMD_SW_VER_CNT               (5)

// 硬件板的PCB号
#define UE_HARDWARE_BOARD_PCB_NO(pstBuildVer)   LOU8(pstBuildVer->ulCustomVer)

// 硬件印制板的版本号
#define UE_HARDWARE_BOARD_VER(pstBuildVer)      HIU8(pstBuildVer->ulCustomVer)

typedef enum 
{
    DIAG_CMD_UE_VER_SUBSYSTEM_BOOT = 0,
    DIAG_CMD_UE_VER_SUBSYSTEM_BSP  = 1,
    DIAG_CMD_UE_VER_SUBSYSTEM_DSP,
    DIAG_CMD_UE_VER_SUBSYSTEM_MSP,
    DIAG_CMD_UE_VER_SUBSYSTEM_PS,
    DIAG_CMD_UE_VER_SUBSYSTEM_HW,
    DIAG_CMD_UE_VER_SUBSYSTEM_ASIC,
    DIAG_CMD_UE_VER_SUBSYSTEM_MAX
} DIAG_CMD_SW_VER_SUBSYSTEM_ENUM;

//*****************************************************************************
// CMD ID : DIAG_CMD_SOC_INFO_QRY
// REQ    : 命令ID标识,无REQ结构
// CNF    : DIAG_CMD_SOC_INFO_QRY_CNF_STRU
// IND    : NONE
//*****************************************************************************
typedef struct 
{
    HI_U32 ulRc; // 表明执行结果是否成功
    HI_CHAR szManufacturerId[32]; 
    HI_CHAR szModelId[32];
    HI_CHAR szProductName[32];
    HI_UE_SOFT_VERSION_S stUeSoftPrivateVer;
    HI_UE_BUILD_VER_INFO_S astVerInfo[DIAG_CMD_UE_VER_SUBSYSTEM_MAX];
} DIAG_CMD_VER_QRY_CNF_STRU;


#if defined(MSP_HAVE_NEW_VERSION)

//*****************************************************************************
// CMD ID : DIAG_CMD_SW_VER_QRY
// REQ    : DIAG_CMD_SW_VER_QRY_REQ_STRU
// CNF    : DIAG_CMD_SW_VER_QRY_CNF_STRU
// IND    : NONE 
//*****************************************************************************

//*****************************************************************************
// CMD ID : DIAG_CMD_SOC_INFO_QRY
// REQ    : DIAG_CMD_SOC_INFO_QRY_REQ_STRU
// CNF    : DIAG_CMD_SOC_INFO_QRY_CNF_STRU
// IND    : NONE 
//*****************************************************************************

#define DIAG_CMD_SOC_PROCESS_MAX_CNT         (8)
#define DIAG_CMD_SOC_CHIP_MAX_CNT            (8)
#define DIAG_CMD_SOC_IP_MAX_CNT              (20)

typedef struct 
{
    HI_U32 ulId;
    HI_U32 ulVerVal;
} DIAG_CMD_SOC_ITEM_INFO_STRU;

// NONE:命令ID标识,无REQ结构
//
typedef struct 
{
    HI_U32 ulCurrentCpuId;                                                    // 当前运行的CPU
    DIAG_CMD_SOC_ITEM_INFO_STRU stProcessInfo[DIAG_CMD_SOC_PROCESS_MAX_CNT]; // SOC中集成的所有处理器的ID
    DIAG_CMD_SOC_ITEM_INFO_STRU stChipVer[DIAG_CMD_SOC_CHIP_MAX_CNT];        // 芯片版本号
    DIAG_CMD_SOC_ITEM_INFO_STRU stSocIpVer[DIAG_CMD_SOC_IP_MAX_CNT];         // SOC各个IP的版本
} DIAG_CMD_SOC_INFO_QRY_CNF_STRU;


#else

//*****************************************************************************
// CMD ID : DIAG_CMD_SW_VER_QRY
// REQ    : DIAG_CMD_SW_VER_QRY_REQ_STRU
// CNF    : DIAG_CMD_SW_VER_QRY_CNF_STRU
// IND    : NONE 
//*****************************************************************************

// NONE:命令ID标识,无REQ结构
//
typedef struct 
{
    HI_U32 ulRc;                        // 表明执行结果是否成功
    HI_U32 ulVerSize;                   // 版本信息长度
    HI_S8  acSoftVer[0];                // 版本信息缓冲区
} DIAG_CMD_SW_VER_QRY_CNF_STRU;

#endif


//*****************************************************************************
// CMD ID : DIAG_CMD_HW_VER_QRY
// REQ    : DIAG_CMD_HW_VER_QRY_REQ_STRU
// CNF    : DIAG_CMD_HW_VER_QRY_CNF_STRU
// IND    : NONE 
//*****************************************************************************

// NONE:命令ID标识,无REQ结构

typedef struct 
{
    HI_U32 ulRc;                        // 表明执行结果是否成功
    HI_U32 ulVerSize;                   // 版本信息长度
    HI_S8  acHwVer[0];                  // 版本信息缓冲区
} DIAG_CMD_HW_VER_QRY_CNF_STRU;  


//*****************************************************************************
// CMD ID : DIAG_CMD_IMEI_QRY
// REQ    : DIAG_CMD_IMEI_QRY_REQ_STRU
// CNF    : DIAG_CMD_IMEI_QRY_CNF_STRU
// IND    : NONE 
//*****************************************************************************

// NONE:命令ID标识,无REQ结构

//
typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulIMEIsize;                   // IMEI信息长度
    
    // 获得的配置项的个数,如果异常,在NV初始化状态良好的该数目可能会和所要求得到的数目不同
    // 得到指定ID的配置信息
    // IMEI码的前六位数字即TAC码,TAC码代表了终端的型号 357890比如代表HiMSP1858
    // IMEI码的7、8位即FAC码，其含义是指手机产地,比如80中国
    // IMEI码的9～14位即为SNR码，是手机的出厂序号
    // IMEI码的15位,SP(备用号码)
    HI_S8  acIMEI[0];                    // IMEI信息缓冲区
} DIAG_CMD_IMEI_QRY_CNF_STRU; 


//*****************************************************************************
// CMD ID : DIAG_CMD_HW_INFO_QRY
// REQ    : DIAG_CMD_HW_INFO_QRY_REQ_STRU
// CNF    : DIAG_CMD_HW_INFO_QRY_CNF_STRU
// IND    : NONE 
//*****************************************************************************

// NONE:命令ID标识,无REQ结构

//
typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulHwInfosize;                 // 产品信息长度
    
    // 设备名称以产品版本信息以及设备出厂时间
    // 例如"HiMSP1858,V5.58-19/02/09",中间以"-"分割
    HI_S8  acHwInfo[0];                  // 产品信息缓冲区
} DIAG_CMD_HW_INFO_QRY_CNF_STRU;  


//*****************************************************************************
// CMD ID : DIAG_CMD_NV_WR
// REQ    : DIAG_CMD_NV_WR_REQ_STRU
// CNF    : DIAG_CMD_NV_WR_CNF_STRU
// IND    : NONE 
//*****************************************************************************

typedef struct  
{
    HI_U32 ulNVId;                       // 需要写入的NV ID
    HI_U32 ulDataSize;                   // 需要写入的NV项数据的大小
    HI_U8  aucData[0];                   // 数据缓冲区
} DIAG_CMD_NV_WR_REQ_STRU;


typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功,0表示成功，其他的为错误码。
    HI_U32 ulNVId;
} DIAG_CMD_NV_WR_CNF_STRU; 


//*****************************************************************************
// CMD ID : DIAG_CMD_NV_BIN_LOAD
// REQ    : DIAG_CMD_NV_BIN_LOAD_REQ_STRU
// CNF    : DIAG_CMD_NV_BIN_LOAD_CNF_STRU
// IND    : NONE 
//*****************************************************************************
#define MSP_BIN_FILE_MAX_SIZE           (126*1024)

typedef struct  
{
    HI_U16 ulBlockIndex;                 // 写入的文件块序列号，从0开始
    HI_U16 ulTotalBlockCnt;              // 总块数,总块数不大于MSP_BIN_FILE_MAX_SIZE/DIAG_CMD_MEM_RD_MAX_NUM +1
    HI_U32 ulTotalSize;                  // 文件总大小，小于126K
    HI_U32 ulBlockSize;                  // 本次写入的数据大小，
                                        // 如限定每块最大长度，则暂定以前面约定的DIAG_CMD_MEM_RD_MAX_NUM为准，
                                        // 否则也可不对每块最大尺寸作限制
    HI_U8  aucData[0];                   // 数据缓冲区
} DIAG_CMD_NV_FILE_LOAD_REQ_STRU;

#define DIAG_CMD_TOTAL_FILE             (0xFFFFFFFF)

typedef struct 
{
    // 返回上个传入块的执行结果
    // 如整个文件写入完毕，则返回整个文件的执行结果
    HI_U32 ulRc;

    // 若重传已写入的BLOCK，则丢弃前面写入的BLOCK, 以最后一次为准
    // 如存在未写入块，则返回该块INDEX
    // 如所有块均已成功写入，则返回INDEX为DIAG_CMD_TOTAL_FILE(0xFFFFFFFF)
    // 如传入INDEX为0，则丢弃前面写入的块，认为文件为新传入
    // 如指定时间(暂定5s)内，未能加载全部文件内容，则提示超时
    // 当整个文件加载成功时，Index返回值为0xFFFFFFFF
    HI_U32 ulIndex;
} DIAG_CMD_NV_FILE_LOAD_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_NV_IMPORT
// REQ    : DIAG_CMD_NV_IMPORT_REQ_STRU
// CNF    : DIAG_CMD_NV_IMPORT_CNF_STRU
//*****************************************************************************

// 单个NV项的结构
typedef struct  
{
    HI_U32 ulNVId;                       // 需要写入的NV ID
    HI_U32 ulDataSize;                   // 需要写入的NV项数据的大小
    HI_U8  aucData[0];                   // 数据缓冲区
} DIAG_CMD_NV_INFOR_STRU;

// REQ主结构
typedef struct  
{
    HI_U32 ulNVNum;                      // 需要写入的NV个数
    DIAG_CMD_NV_INFOR_STRU astNVIfor;   // 多个astNVIfor的起始
} DIAG_CMD_NV_IMPORT_REQ_STRU;


typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
} DIAG_CMD_NV_IMPORT_CNF_STRU; 


//*****************************************************************************
// CMD ID : DIAG_CMD_NV_EXPORT
// REQ    : DIAG_CMD_NV_EXPORT_REQ_STRU
// CNF    : DIAG_CMD_NV_EXPORT_CNF_STRU
// IND ID : DIAG_CMD_NV_EXPORT_IND
// IND    : DIAG_CMD_NV_EXPORT_IND_STRU
//*****************************************************************************
#define DIAG_CMD_EXPORT_NV_BY_ID  (0)   // 导出所有NV项
#define DIAG_CMD_EXPORT_NV_ALL    (1)   // 导出所有NV项
#define DIAG_CMD_EXPORT_NV_MSP    (2)   // 导出所有MSP的NV项
#define DIAG_CMD_EXPORT_NV_PS     (3)   // 导出所有PS的NV项

typedef struct  
{
    HI_U32 ulNVType;                     // 导出NV项的类别，0:BYNVID,1:ALL,2:MSP,3:PS
    HI_U32 ulNVnum;                      // 导出的NV项个数
    HI_U32 aulNVId[0];                   // 导出的NV项Id数组
} DIAG_CMD_NV_EXPORT_REQ_STRU;

typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
} DIAG_CMD_NV_EXPORT_CNF_STRU;

typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
    DIAG_CMD_NV_INFOR_STRU stNVItem;    // 导出NV项
} DIAG_CMD_NV_EXPORT_ITEM_STRU;

typedef struct 
{
    HI_U32 ulRst;                        // 上报IND执行结果
    HI_U32 ulRemainNum;                  // 剩余的NV个数
    HI_U32 ulReadNum;                    // 当次获取的NV项数据的个数
    HI_U8  aucData[0];                   // 获取的NV项数据
} DIAG_CMD_NV_EXPORT_IND_STRU;


typedef struct
{
    HI_U8 ucIPType;
    HI_U8 aucReserved[3];
    HI_U8 aucIpV4Addr[DIAG_MAX_IPV4_ADDR_LEN];
    HI_U8 aucIpV6Addr[DIAG_MAX_IPV6_ADDR_LEN];
} DIAG_ESM_PDN_ADDR_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_PDP_ACTIVE
//          DIAG_CMD_PDP_ACTIVE_IND
// REQ    : DIAG_CMD_PDP_ACTIVE_REQ_STRU
// CNF    : DIAG_CMD_PDP_ACTIVE_CNF_STRU
// IND    : DIAG_CMD_PDP_ACTIVE_IND_STRU
//*****************************************************************************
typedef struct
{
    HI_U32 ulCid;                        // Cid,范围1~31
    HI_U32 ulBearerType;                 // 承载类型，0：缺省，1：专有
    HI_U32 ulLinkCid;                    // 激活Profile时，所属的网关
} DIAG_CMD_PDP_ACTIVE_REQ_STRU;

typedef struct 
{
    HI_U32 ulCid;
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulBearerState;                // 承载激活状态, 0: 未激活, 1:激活
    HI_U32 ulBearerType;                 // 承载类型
    HI_U32 ulLinkCid;                    // 所属缺省承载对应CID
    DIAG_ESM_PDN_ADDR_STRU stPDNAddr;   // PDN地址信息
    EPS_QOS_INFO_STRU stEPSQoSInfo;     // QoS
    HI_U8 aucApnName[101];               // APN 名称,(最多100位APN + 字符串结尾字符'\0')
    HI_U8 aucReserved[3];                // 保留字段
} DIAG_CMD_PDP_ACTIVE_CNF_STRU;

typedef struct 
{
    HI_U32 ulCid;
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulBearerState;                // 承载激活状态，0：未激活，1：激活
    HI_U32 ulBearerType;                 // 承载类型，0：缺省，1：专有
    HI_U32 ulLinkCid;                    // 所属缺省承载对应CID
    DIAG_ESM_PDN_ADDR_STRU stPDNAddr;   // PDN地址信息
    EPS_QOS_INFO_STRU stEPSQoSInfo;     // QoS
    HI_U8 aucApnName[101];               // APN 名称,(最多100位APN + 字符串结尾字符'\0')
    HI_U8 aucReserved[3];                // 保留字段
    DIAG_TFT_INFO_STRU stTFTInfo;       // TFT信息，后续优化支持多个
} DIAG_CMD_PDP_ACTIVE_IND_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_PDP_DEACTIVE
//          DIAG_CMD_PDP_DEACTIVE_IND
// REQ    : DIAG_CMD_PDP_DEACTIVE_REQ_STRU
// CNF    : DIAG_CMD_PDP_DEACTIVE_CNF_STRU
// IND    : DIAG_CMD_PDP_DEACTIVE_IND_STRU
//*****************************************************************************
typedef struct  
{
    HI_U32 ulCid;                        // Cid,范围1~31
} DIAG_CMD_PDP_DEACTIVE_REQ_STRU;

typedef struct 
{
    HI_U32 ulCid;
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulLinkCid;                    // 所属缺省承载对应CID
    DIAG_ESM_PDN_ADDR_STRU stPDNAddr;   // PDN地址信息
} DIAG_CMD_PDP_DEACTIVE_CNF_STRU;

typedef struct 
{
    HI_U32 ulCid;
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulLinkCid;                    // 所属缺省承载对应CID
    DIAG_ESM_PDN_ADDR_STRU stPDNAddr;   // PDN地址信息
} DIAG_CMD_PDP_DEACTIVE_IND_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_NV_DEL
// REQ    : DIAG_CMD_NV_DEL_REQ_STRU
// CNF    : DIAG_CMD_NV_DEL_CNF_STRU
//*****************************************************************************
typedef struct  
{
    HI_U32 ulNVnum;                      // 待删除的NV项个数
    HI_U32 aulNVId[0];                   // 待删除的NV项Id数组
} DIAG_CMD_NV_DEL_REQ_STRU;

typedef struct 
{
    HI_U32 ulRc;                         // 表明执行结果是否成功
    HI_U32 ulFailureNum;                 // 删除失败的NV ID个数
    HI_U32 aulFailureId[0];              // 删除失败的NV ID
} DIAG_CMD_NV_DEL_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_GET_UNLOCK_CODE
// REQ    : DIAG_CMD_GET_UNLOCK_CODE_REQ_STRU
// CNF    : DIAG_CMD_GET_UNLOCK_CODE_CNF_STRU
// IND    : NONE 
//*****************************************************************************


typedef struct 
{
    HI_U32 ulRc;                        // 查询结果错误码
    HI_U32 ulCodeLen;                   // 解锁码长度
    HI_CHAR szCode[0];                  // 解锁码
} DIAG_CMD_GET_UNLOCK_CODE_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_LOCK_CELL
// REQ    : DIAG_CMD_LOCK_CELL_REQ_STRU
// CNF    : DIAG_CMD_LOCK_CELL_CNF_STRU
//*****************************************************************************
typedef struct
{
    HI_U16 usCellId;                     // 小区ID
    HI_U16 usFreqPoint;                  // 频点信息
} DIAG_CELL_INFO_STRU;

typedef struct
{
    HI_U16 usLowBand;                    // 频点下限
    HI_U16 usHighBand;                   // 频点上限
} DIAG_FREQ_BAND_STRU;

typedef struct
{
    HI_U32 ulCnt;                        // 锁定频带个数
    DIAG_FREQ_BAND_STRU astFreqBand[0]; // 频带列表
} DIAG_FREQ_BAND_LIST_STRU;

#define DIAG_CMD_OPT_TYPE_FREQ             (0)
#define DIAG_CMD_OPT_TYPE_CELL             (1)
#define DIAG_CMD_OPT_TYPE_BAND             (2)

#define DIAG_CMD_LOCK_TYPE_LOCK            (0)
#define DIAG_CMD_LOCK_TYPE_UNLOCK          (1)

typedef struct
{
   HI_U16 usOptType;                     // 0: 锁频点,1: 频点和小区联合锁定，2：锁频带
   HI_U16 usCmdType;                     // 0: LOCK,1: UNLOCK

   union
   {
       HI_U32 ulFreqPoint;
       DIAG_CELL_INFO_STRU stCellInfo;
       DIAG_FREQ_BAND_LIST_STRU stFreqBandList;
   }u;
} DIAG_CMD_LOCK_CELL_REQ_STRU;

typedef struct
{
    HI_U32 ulRc;                        // 结果码
} DIAG_CMD_LOCK_CELL_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_HSO_AT_SWT
// REQ    : DIAG_CMD_LOCK_PLMN_REQ_STRU
// CNF    : DIAG_CMD_LOCK_PLMN_CNF_STRU
//*****************************************************************************
#define DIAG_CMD_HSO_AT_CHAN_DIAG_CLOSE      (0x01)
#define DIAG_CMD_HSO_AT_CHAN_DIAG_OPEN       (0x02)
#define DIAG_CMD_HSO_AT_CHAN_URC_OPEN        (0x04)
#define DIAG_CMD_HSO_AT_CHAN_URC_CLOSE       (0x08)

typedef struct
{
    // 支持开关组合(非互斥)
    // 互斥开关组合：0x3(0x1与0x2组合)、0xc(0x4与0x8)
    // 0x01：关闭DIAG的AT通道（默认值）
    // 0x02：开启DIAG的AT通道
    // 0x04：开启DIAG的URC通道
    // 0x08：关闭DIAG的URC通道
    HI_U32 ulSwt;
} DIAG_CMD_HSO_AT_SWT_REQ_STRU;

typedef struct
{
    HI_U32 ulRc;
    HI_U32 ulSwt; // 当前的开关值组合
} DIAG_CMD_HSO_AT_SWT_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_HSO_AT_SWT
// REQ    : DIAG_CMD_HSO_AT_REQ_STRU
// CNF    : DIAG_CMD_HSO_AT_CNF_STRU
// IND    : DIAG_CMD_HSO_AT_IND_STRU
//*****************************************************************************
typedef struct
{
    HI_U32 ulStreamSize;
    HI_CHAR pszStream[0];
} DIAG_CMD_HSO_AT_REQ_STRU;

#define DIAG_CMD_AT_URC             (0xFFFFFFFF)

typedef struct 
{
   HI_U32 ulRc;
   HI_U32 ulStreamSize;
   HI_CHAR pszStream[0];
} DIAG_CMD_HSO_AT_CNF_STRU, DIAG_CMD_HSO_AT_IND_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_MSP_SDM_QURY
// REQ    : DIAG_CMD_MSP_SDM_QURY_REQ_STRU
// CNF    : DIAG_CMD_MSP_SDM_QURY_CNF_STRU
// IND    : DIAG_CMD_MSP_SDM_QURY_IND_STRU
//*****************************************************************************
// if want to request more SDM information, request time after time
typedef struct
{
    HI_U32 ulCalledNum;  // 调用次数或者消息次数,或者表明该函数是否被调用
    HI_U32 ulRserved1;   // 表明该位置或者其他,HAL_DIAG_SYS_DEBUG_ENUM决定
    HI_U32 ulRserved2;   // 表明特殊含义或者其他,HAL_DIAG_SYS_DEBUG_ENUM决定
    HI_U32 ulRserved3;   // 表明特殊含义或者其他,HAL_DIAG_SYS_DEBUG_ENUM决定
    HI_U32 ulRtcTime;    // 表明最近执行过的时间
} DIAG_CMD_MSP_SDM_MAIN_INFO_STRU;

typedef struct
{
    HI_U32 ulMSPSdmId; // reference to HAL_DIAG_SYS_DEBUG_ENUM
} DIAG_CMD_MSP_SDM_QURY_REQ_STRU;

typedef struct
{
    HI_U32 ulRc;
    HI_U32 ulMSPSdmId; // reference to HAL_DIAG_SYS_DEBUG_ENUM
    DIAG_CMD_MSP_SDM_MAIN_INFO_STRU stMspSdmInfo;
} DIAG_CMD_MSP_SDM_QURY_CNF_STRU;

//*****************************************************************************
// CMD ID : DIAG_CMD_M
// REQ    : DIAG_CMD_M_REQ_STRU
// CNF    : DIAG_CMD_M_CNF_STRU
//*****************************************************************************
typedef struct
{
    HI_PVOID pAddr;
    HI_U32   ulDataSize;
    HI_U8    aucData[0];
} DIAG_CMD_M_REQ_STRU;

typedef struct 
{
   HI_U32 ulRet;
} DIAG_CMD_M_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_D
// REQ    : DIAG_CMD_D_REQ_STRU
// CNF    : DIAG_CMD_D_CNF_STRU
//*****************************************************************************
#define DIAG_CMD_D_WIDTH_1         (1)
#define DIAG_CMD_D_WIDTH_2         (2)
#define DIAG_CMD_D_WIDTH_4         (4)
#define DIAG_CMD_D_WIDTH_8         (8)

typedef struct
{
    HI_PVOID pAddr;
    HI_U16   usNunits; // 个数
    HI_U16   usWidth;  // 长度
} DIAG_CMD_D_REQ_STRU;

typedef struct 
{
   HI_U32 ulRet;
   HI_U32 ulAddr;
   HI_U16 usNunits;    // 个数
   HI_U16 usWidth;     // 长度
   HI_U8  aucData[0];
} DIAG_CMD_D_CNF_STRU;


//*****************************************************************************
// CMD ID : DIAG_CMD_CHANNEL_CONFIG
// REQ    : DIAG_CMD_CHANNEL_CONFIG_REQ_STRU
// CNF    : DIAG_CMD_CHANNEL_CONFIG_CNF_STRU
//*****************************************************************************
typedef struct
{
    HI_U32 ulBearChannel; 
} DIAG_CMD_CHANNEL_CONFIG_REQ_STRU;

typedef struct
{
    HI_U32 ulRc;          // 结果码 
    HI_U32 ulBearChannel; // 0: TCP+UDP, DEFAULT;1: TCP
} DIAG_CMD_CHANNEL_CONFIG_CNF_STRU;


#endif // __DIAG_SYS_CMD_PARAM_PLUGIN_H__

